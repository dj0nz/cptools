# A basic set of Check Point Web API functions to include in Python scripts
# dj0Nz Oct 2024

import os, requests, json, datetime

# next two lines needed to suppress warnings if self signed certificates are used
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# api login function. input:
# - auth_file : netrc file with credentials for management
# - ip_addr   : ip address of check point management
# output: session id
def login(ip_addr,auth_file):
    # check credentials file
    exists = os.path.isfile(auth_file)
    if not exists:
        return 'Credentials file not found.'
    # get api key from file
    with open(auth_file) as file:
        token = file.readline().strip('\n')
    if token:
        payload = {'api-key' : token}
    else:
        return 'Api key not found in auth file.'
    # do login and return sid
    request_headers = {'Content-Type' : 'application/json'}
    url = 'https://' + ip_addr + '/web_api/login'
    req = requests.post(url,data=json.dumps(payload),headers=request_headers,verify=False)
    response = [req.status_code, req.json()]
    if str(response[0]) == '200':
        return response[1]["sid"]
    else:
        print(json.dumps(response, indent=2))
        return 'Login error.'

# api logout
def logout(ip_addr,sid):
    url = 'https://' + ip_addr + '/web_api/logout'
    payload = {}
    request_headers = {'Content-Type' : 'application/json', 'X-chkp-sid' : sid}
    req = requests.post(url,data=json.dumps(payload),headers=request_headers,verify=False)
    response = [req.status_code, req.json()]
    if str(response[0]) == '200':
        return response[1]['message']
    else:
        return 'Logout error'

# the 'publish' api call returns a task id which is monitored until the 'show-task'
# call returns anything other than 'in progress'. the publish timeout makes sure
# the function returns even if it gets stuck somewhere.
# input:
# - ip_addr : ip address (or host name) of check point management server
# - sid : the session identifier generated by the login call
# output:
# - 'Publish succeeded' if successful, any other, if not.
publish_timeout = 120
def publish(ip_addr,sid):
    url = 'https://' + ip_addr + '/web_api/publish'
    payload = {}
    request_headers = {'Content-Type' : 'application/json', 'X-chkp-sid' : sid}
    req = requests.post(url,data=json.dumps(payload),headers=request_headers,verify=False)
    response = [req.status_code, req.json()]
    if str(response[0]) == '200':
        task_id = response[1]['task-id']
        url = 'https://' + ip_addr + '/web_api/show-task'
        payload = { 'task-id' : task_id }
        status = 'in progress'
        end_time = datetime.datetime.now() + datetime.timedelta(seconds=publish_timeout)
        while status == 'in progress':
            if datetime.datetime.now() >= end_time:
                return 'Publish timeout'
            req = requests.post(url,data=json.dumps(payload),headers=request_headers,verify=False)
            response = [req.status_code, req.json()]
            status = response[1]['tasks'][0]['status']
        if status == 'succeeded':
            return 'Publish succeeded'
        else:
            print('Publish error:')
            return status
    else:
        return 'Publish error'

# check point api call. for payload/command syntax see
# https://sc1.checkpoint.com/documents/latest/APIs/index.html#introduction~v1.9.1%20
# input:
# - ip_addr : ip address of check point management
# - command, payload (see link above)
# - sid : generated by login
# output:
# depends... ;)
def call(ip_addr,command,payload,sid):
    url = 'https://' + ip_addr + '/web_api/' + command
    request_headers = {'Content-Type' : 'application/json', 'X-chkp-sid' : sid}
    response = requests.post(url,data=json.dumps(payload), headers=request_headers, verify = False)
    status = response.status_code
    return [status, response.json()]
